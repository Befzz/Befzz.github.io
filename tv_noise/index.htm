<!DOCTYPE HTML>
<html>
<head id="head">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Description" content="TV noise simulation online. Powered by html5 WebGL.">
<link rel="shortcut icon" href="favicon.png" />
<link rel="icon" type="image/png" href="favicon.png" />
<!-- Yandex.Metrika counter -->
<script src="https://mc.yandex.ru/metrika/watch.js" type="text/javascript"></script> <script type="text/javascript"> try { var yaCounter37388100 = new Ya.Metrika({ id:37388100 }); } catch(e) { } </script> <noscript><div><img src="https://mc.yandex.ru/watch/37388100" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
<title>TV Noise Online</title>
<style type="text/css">
HTML,BODY{
  margin:0;
  padding:0;
  overflow:hidden;
  cursor:none;
}
</style>
<script src="nolibs_equ.js"></script>
<script id="shader_frag_display"  type="x-shader/x-fragment">
precision mediump float;

uniform sampler2D uTexture;

const float texWidth = 4096.0;
/*
0 - Gray
1 - BW
2 - color 0 .. 1
3 - color 0 or 1
*/
uniform int n_type;
uniform float n_slider;

float snoise(in vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(void) {
  gl_FragColor.a = 1.;
  vec2 cd = gl_FragCoord.xy;
  cd.x /= texWidth;

  vec4 c  = texture2D(uTexture,cd);
  vec4 c2 = texture2D(uTexture,vec2(cd.x / 3.,0.1));

  cd.y *= c.r*c.g + c2.r*c2.g + c.b*c.a + c2.b*c2.a;
  float n = snoise(cd);

  if(n_type == 0) {
    gl_FragColor.rgb = vec3(n);
  } else if(n_type == 1) {
    gl_FragColor.rgb = vec3(n>=n_slider?1.:0.);
  } else if(n_type == 2) {
    gl_FragColor.r = snoise(cd);
    gl_FragColor.g = snoise(cd*1.001);
    gl_FragColor.b = snoise(cd*1.002);
  } else if(n_type == 3) {
    float n2 = snoise(cd*1.001);
    if(n <= 1./3.) {
      gl_FragColor.b = n2>n_slider?1.:0.;
    } else if(n <= 2./3.) {
      gl_FragColor.g = n2>n_slider?1.:0.;
    } else {
      gl_FragColor.r = n2>n_slider?1.:0.;
    }
  }

}
</script>
<script id="shader_vert_display" type="x-shader/x-vertex">
attribute vec3 aVertexPosition;
void main(void) {
  gl_Position = vec4(aVertexPosition, 1.0);
}
</script>
</head>
<body></body>
</html>